// Generated by gencpp from file rover_msgs/WayPoints_srv_TaoRequest.msg
// DO NOT EDIT!


#ifndef ROVER_MSGS_MESSAGE_WAYPOINTS_SRV_TAOREQUEST_H
#define ROVER_MSGS_MESSAGE_WAYPOINTS_SRV_TAOREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rover_msgs
{
template <class ContainerAllocator>
struct WayPoints_srv_TaoRequest_
{
  typedef WayPoints_srv_TaoRequest_<ContainerAllocator> Type;

  WayPoints_srv_TaoRequest_()
    : Start()
    , Target()  {
      Start.assign(0.0);

      Target.assign(0.0);
  }
  WayPoints_srv_TaoRequest_(const ContainerAllocator& _alloc)
    : Start()
    , Target()  {
  (void)_alloc;
      Start.assign(0.0);

      Target.assign(0.0);
  }



   typedef boost::array<double, 2>  _Start_type;
  _Start_type Start;

   typedef boost::array<double, 2>  _Target_type;
  _Target_type Target;





  typedef boost::shared_ptr< ::rover_msgs::WayPoints_srv_TaoRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rover_msgs::WayPoints_srv_TaoRequest_<ContainerAllocator> const> ConstPtr;

}; // struct WayPoints_srv_TaoRequest_

typedef ::rover_msgs::WayPoints_srv_TaoRequest_<std::allocator<void> > WayPoints_srv_TaoRequest;

typedef boost::shared_ptr< ::rover_msgs::WayPoints_srv_TaoRequest > WayPoints_srv_TaoRequestPtr;
typedef boost::shared_ptr< ::rover_msgs::WayPoints_srv_TaoRequest const> WayPoints_srv_TaoRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rover_msgs::WayPoints_srv_TaoRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rover_msgs::WayPoints_srv_TaoRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rover_msgs::WayPoints_srv_TaoRequest_<ContainerAllocator1> & lhs, const ::rover_msgs::WayPoints_srv_TaoRequest_<ContainerAllocator2> & rhs)
{
  return lhs.Start == rhs.Start &&
    lhs.Target == rhs.Target;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rover_msgs::WayPoints_srv_TaoRequest_<ContainerAllocator1> & lhs, const ::rover_msgs::WayPoints_srv_TaoRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rover_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::rover_msgs::WayPoints_srv_TaoRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rover_msgs::WayPoints_srv_TaoRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rover_msgs::WayPoints_srv_TaoRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rover_msgs::WayPoints_srv_TaoRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rover_msgs::WayPoints_srv_TaoRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rover_msgs::WayPoints_srv_TaoRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rover_msgs::WayPoints_srv_TaoRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "02ca451f5485348f989a305e0bc6aad0";
  }

  static const char* value(const ::rover_msgs::WayPoints_srv_TaoRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x02ca451f5485348fULL;
  static const uint64_t static_value2 = 0x989a305e0bc6aad0ULL;
};

template<class ContainerAllocator>
struct DataType< ::rover_msgs::WayPoints_srv_TaoRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rover_msgs/WayPoints_srv_TaoRequest";
  }

  static const char* value(const ::rover_msgs::WayPoints_srv_TaoRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rover_msgs::WayPoints_srv_TaoRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[2] Start\n"
"float64[2] Target\n"
;
  }

  static const char* value(const ::rover_msgs::WayPoints_srv_TaoRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rover_msgs::WayPoints_srv_TaoRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Start);
      stream.next(m.Target);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WayPoints_srv_TaoRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rover_msgs::WayPoints_srv_TaoRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rover_msgs::WayPoints_srv_TaoRequest_<ContainerAllocator>& v)
  {
    s << indent << "Start[]" << std::endl;
    for (size_t i = 0; i < v.Start.size(); ++i)
    {
      s << indent << "  Start[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.Start[i]);
    }
    s << indent << "Target[]" << std::endl;
    for (size_t i = 0; i < v.Target.size(); ++i)
    {
      s << indent << "  Target[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.Target[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROVER_MSGS_MESSAGE_WAYPOINTS_SRV_TAOREQUEST_H
